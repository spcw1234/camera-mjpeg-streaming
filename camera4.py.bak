import cv2
import gi
import os
import serial
import threading
import sys
import termios
import tty
import time
import select
import numpy as np
from pynput import keyboard
from rknnlite.api import RKNNLite as RKNN

gi.require_version('Gst', '1.0')
gi.require_version('GstRtspServer', '1.0')
from gi.repository import Gst, GstRtspServer, GLib

def test_camera_device(device_path):
    """Test if a camera device is working"""
    try:
        cap = cv2.VideoCapture(device_path)
        if not cap.isOpened():
            return False
        ret, frame = cap.read()
        cap.release()
        return ret and frame is not None
    except:
        return False

class KeyboardController:
    def __init__(self, serial_port='/dev/ttyS3', baudrate=115200):
        try:
            if serial_port:
                self.ser = serial.Serial(serial_port, baudrate, timeout=1)
                print(f"시리얼 포트 {serial_port} 연결 성공")
            else:
                self.ser = None
                print("시리얼 포트 없이 초기화")
            self.running = True
        except Exception as e:
            print(f"시리얼 포트 연결 실패: {e}")
            # 시리얼 포트 연결 실패 시 대체 로직
            self.ser = None
            self.running = False
        
        # 키보드 이벤트 플래그
        self.interrupt_flag = False

    def on_press(self, key):
        try:
            command = None
            
            # 키 입력 확인 로그 추가
            print(f"키 입력 감지: {key}")
            
            # 문자 키 처리 (WASD)
            if hasattr(key, 'char'):
                if key.char == 'w':
                    command = 'up'
                    print('W 키 감지 - 위로 이동')
                elif key.char == 's':
                    command = 'down'
                    print('S 키 감지 - 아래로 이동')
                elif key.char == 'a':
                    command = 'left'
                    print('A 키 감지 - 왼쪽으로 이동')
                elif key.char == 'd':
                    command = 'right'
                    print('D 키 감지 - 오른쪽으로 이동')
                elif key.char == 'q':
                    print('Q 키 감지 - 종료')
                    self.running = False
                    self.interrupt_flag = True
                    return False
            # ESC 키 처리
            elif key == keyboard.Key.esc:
                print('ESC 키 감지 - 종료')
                self.running = False
                self.interrupt_flag = True
                return False
                
            if command and self.ser and self.ser.is_open:
                try:
                    self.ser.write(f"{command}\n".encode())
                    print(f"명령 전송 성공: {command}")
                except Exception as e:
                    print(f"UART 전송 에러: {e}")
            elif command:
                print(f"명령 전송 실패: 시리얼 포트가 열려 있지 않음")
                
        except Exception as e:
            print(f"키 처리 에러: {e}")
            import traceback
            traceback.print_exc()
            
        return True  # 계속 리스닝

    def start(self):
        print("\n키보드 컨트롤 시작")
        print("WASD 키를 사용하여 제어하세요:")
        print("W - 위로 이동")
        print("A - 왼쪽으로 이동")
        print("S - 아래로 이동")
        print("D - 오른쪽으로 이동")
        print("종료: Q 또는 ESC")
        
        # 키보드 리스너를 별도 스레드에서 실행
        self.keyboard_thread = threading.Thread(target=self._keyboard_listener)
        self.keyboard_thread.daemon = True
        self.keyboard_thread.start()
        print("키보드 리스너 스레드 시작됨")

    def _keyboard_listener(self):
        try:
            # 터미널 설정 저장
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            
            try:
                tty.setraw(fd)
                
                while self.running and not self.interrupt_flag:
                    # 키 입력 확인 (논블로킹)
                    r, w, e = select.select([sys.stdin], [], [], 0.1)
                    if r:
                        key = sys.stdin.read(1)
                        
                        # 키 처리 호출
                        if not self._process_key(key):
                            break
                            
            finally:
                # 터미널 설정 복원
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
                
        except Exception as e:
            print(f"키보드 리스너 에러: {e}")
            import traceback
            traceback.print_exc()
            self.interrupt_flag = True

    def _process_key(self, key):
        try:
            command = None
            
            # ESC 키 시퀀스 또는 방향키 처리
            if key == '\x1b':  # ESC 키
                next1 = sys.stdin.read(1)
                if next1 == '[':
                    next2 = sys.stdin.read(1)
                    
                    if next2 == 'A':  # 위쪽 화살표
                        command = 'up'
                        print('Up 키 감지')
                    elif next2 == 'B':  # 아래쪽 화살표
                        command = 'down'
                        print('Down 키 감지')
                    elif next2 == 'D':  # 왼쪽 화살표
                        command = 'left'
                        print('Left 키 감지')
                    elif next2 == 'C':  # 오른쪽 화살표
                        command = 'right'
                        print('Right 키 감지')
                else:
                    # 단일 ESC 키
                    print('ESC 키 감지 - 종료')
                    self.running = False
                    self.interrupt_flag = True
                    return False
            
            # 'q' 키로 종료
            elif key == 'q':
                print('q 키 감지 - 종료')
                self.running = False
                self.interrupt_flag = True
                return False
            
            if command and self.ser and self.ser.is_open:
                try:
                    self.ser.write(f"{command}\n".encode())
                    print(f"명령 전송 성공: {command}")
                except Exception as e:
                    print(f"UART 전송 에러: {e}")
            elif command:
                print(f"명령 전송 실패: 시리얼 포트가 열려 있지 않음")
            
            return True
        
        except Exception as e:
            print(f"키 처리 에러: {e}")
            import traceback
            traceback.print_exc()
            return True

    def stop(self):
        print("키보드 컨트롤러 종료 중...")
        self.running = False
        if hasattr(self, 'ser') and self.ser and self.ser.is_open:
            try:
                self.ser.close()
                print("시리얼 포트 닫힘")
            except Exception as e:
                print(f"시리얼 포트 닫기 실패: {e}")

class RKNNDetector:
    def __init__(self, model_path='/home/spcwtech/yolo5n_fish-rk3566.rknn'):
        self.rknn = RKNN()
        print('Loading RKNN model...')
        try:
            ret = self.rknn.load_rknn(model_path)
            if ret != 0:
                print('Load RKNN model failed')
                exit(ret)
                
            print('Init runtime environment...')
            ret = self.rknn.init_runtime()
            if ret != 0:
                print('Init runtime environment failed')
                exit(ret)
        except Exception as e:
            print(f"RKNN 초기화 오류: {e}")
            import traceback
            traceback.print_exc()
            
        self.input_size = 640
        
        # 트래커 관련 변수 추가
        self.trackers = []
        self.tracking_ids = []
        self.tracking_classes = []
        self.next_id = 0
        self.skip_frames = 0  # 매 N 프레임마다 detection 수행
        self.frame_count = 0
        self.tracker_type = "KCF"
        
        try:
            with open("coco.names", "r") as f:
                self.classes = [line.strip() for line in f.readlines()]
                print(f"클래스 로드 완료: {len(self.classes)}개")
        except FileNotFoundError:
            print("Warning: coco.names not found. Using default class names.")
            self.classes = [f"class_{i}" for i in range(80)]

    def decode_predictions(self, output, conf_thres=0.20,max_score=0.95):
        try:
            pred = output[0].squeeze().transpose(1, 0)
            print('pred shape:', pred.shape)
            
            # 박스 좌표는 그대로 사용
            boxes_raw = pred[:, :4]
            print('Raw boxes range:', boxes_raw.min(), boxes_raw.max())
            print("Raw Objectness range:", pred[:, 4].min(), pred[:, 4].max())
            print("Raw Class probs range:", pred[:, 5:].min(), pred[:, 5:].max())
            
            # Objectness와 클래스 확률 - 200 곱하기 추가
            objectness = pred[:, 4] *10
            class_probs = pred[:, 5:] * 2
            # 클래스 신뢰도 계산
            class_conf = np.max(class_probs, axis=1)
            class_ids = np.argmax(class_probs, axis=1)
            
            # 점수 계산 - 곱셈 대신 덧셈 사용
            scores = objectness + class_conf 
            print("Objectness range:", objectness.min(), objectness.max())
            print("Class conf range:", class_conf.min(), class_conf.max())
            print("Scores range:", scores.min(), scores.max())
            
            # confidence threshold 적용
            mask = (scores > conf_thres) & (scores <= max_score)
            
            # 마스킹된 데이터 추출
            boxes_xywh = boxes_raw[mask]
            scores_filtered = scores[mask]
            class_ids_filtered = class_ids[mask]
            
            if len(boxes_xywh) == 0:
                return np.array([])
            
            # 최종 탐지 결과
            detections = np.column_stack([
                boxes_xywh,
                scores_filtered,
                class_ids_filtered
            ])
            
            return detections
        except Exception as e:
            print(f"Error in decode_predictions: {e}")
            import traceback
            traceback.print_exc()
            return np.array([])

    def apply_nms(self, detections, iou_thres=0.35):
        try:
            if len(detections) == 0:
                return []
            
            boxes = detections[:, :4]
            scores = detections[:, 4]
            
            indices = cv2.dnn.NMSBoxes(
                boxes.tolist(), 
                scores.tolist(), 
                score_threshold=0.60,  # 0.7에서 0.3으로 변경
                nms_threshold=iou_thres
            )
            
            if len(indices) == 0:
                return []
            
            if isinstance(indices, tuple):
                indices = indices[0]
            else:
                indices = indices.flatten()
                
            return detections[indices]
        except Exception as e:
            print(f"Error in apply_nms: {e}")
            import traceback
            traceback.print_exc()
            return []

    def create_tracker(self):
        if self.tracker_type == "KCF":
            return cv2.TrackerKCF_create()
        elif self.tracker_type == "CSRT":
            return cv2.TrackerCSRT_create()

    def update_trackers(self, frame):
        successful_trackers = []
        successful_ids = []
        successful_classes = []
        
        for tracker, track_id, class_id in zip(self.trackers, self.tracking_ids, self.tracking_classes):
            success, box = tracker.update(frame)
            if success:
                successful_trackers.append((tracker, box))
                successful_ids.append(track_id)
                successful_classes.append(class_id)
            
        self.trackers = [t[0] for t in successful_trackers]
        self.tracking_ids = successful_ids
        self.tracking_classes = successful_classes
        
        return [(box, id, cls) for (_, box), id, cls in zip(successful_trackers, successful_ids, successful_classes)]

    def letterbox(self, img, new_shape=(640, 640), color=(114, 114, 114)):
        """Resize and pad image while meeting stride-multiple constraints."""
        shape = img.shape[:2]  # current shape [height, width]
        
        # Scale ratio (new / old)
        r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])
        
        # Compute new unpadded dimensions
        new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))
        
        # Compute padding
        dw, dh = new_shape[1] - new_unpad[0], new_shape[0] - new_unpad[1]
        
        # Divide padding into 2 sides
        dw /= 2
        dh /= 2
        
        # Resize
        if shape[::-1] != new_unpad:
            img = cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)
            
        top, bottom = int(round(dh - 0.1)), int(round(dh + 0.1))
        left, right = int(round(dw - 0.1)), int(round(dw + 0.1))
        
        # Add padding
        img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)
        
        return img, r, (dw, dh)

    def detect(self, frame):
        try:
            if frame is None:
                print("Input frame is None")
                return None

            print(f"Input frame shape: {frame.shape}")
            self.frame_count += 1
            draw_frame = frame.copy()

            # RKNN 추론
            print("\nPerforming detection...")
            img, ratio, pad = self.letterbox(frame, new_shape=(self.input_size, self.input_size))
            
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img = np.expand_dims(img, axis=0)

            # 모델 추론 - KeyboardInterrupt 예외 처리 추가
            try:
                outputs = self.rknn.inference(inputs=[img])
            except KeyboardInterrupt:
                print("키보드 인터럽트 감지! 추론 중단.")
                return draw_frame
            except Exception as e:
                print(f"추론 오류: {e}")
                return draw_frame

            # 모델 출력 형태 확인
            for i, output in enumerate(outputs):
                print(f"Output {i} shape: {output.shape}")
                print(f"Output {i} value range: {np.min(output)} to {np.max(output)}")

            # 새로운 디코딩 및 NMS 적용
            detections = self.decode_predictions(outputs, conf_thres=0.1, max_score=0.95)
            detections = self.apply_nms(detections, iou_thres=0.3)
            
            print(f"Detection results - After NMS: {len(detections)}")

            # 박스 그리기
            for detection in detections:
                try:
                    # XYWH 형식의 좌표를 XYXY로 변환
                    x, y, w, h, score, class_id = detection
                    class_id = int(class_id)
                    x = (x - pad[0]) / ratio  # 패딩 제거 후 원본 크기로 복원
                    y = (y - pad[1]) / ratio
                    w = w / ratio
                    h = h / ratio
                    # 중심점 좌표와 너비, 높이를 좌상단, 우하단 좌표로 변환
                    x1 = int(max(0, x - w/2))
                    y1 = int(max(0, y - h/2))
                    x2 = int(min(frame.shape[1]-1, x + w/2))
                    y2 = int(min(frame.shape[0]-1, y + h/2))

                    # 박스가 너무 작으면 건너뛰기
                    if (x2-x1 < 5) or (y2-y1 < 5):
                        continue

                    cv2.rectangle(draw_frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    
                    # 클래스 이름과 신뢰도
                    class_name = self.classes[class_id] if class_id < len(self.classes) else f"class_{class_id}"
                    label = f'{class_name} {score:.2f}'
                    
                    # 라벨 위치 조정
                    label_y = y1
                    if label_y < 0:  # 라벨이 화면 위로 넘어가면 박스 아래에 표시
                        label_y = y2 + 20
                    
                    # 라벨 배경
                    label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)[0]
                    label_x = min(x1, frame.shape[1] - label_size[0])  # 라벨이 화면 오른쪽을 넘어가지 않도록
                    
                    cv2.rectangle(draw_frame, 
                                (label_x, label_y - label_size[1] - 5), 
                                (label_x + label_size[0], label_y + 5), 
                                (255, 255, 255), 
                                -1)
                    
                    # 텍스트
                    cv2.putText(draw_frame, 
                            label, 
                            (label_x, label_y),
                            cv2.FONT_HERSHEY_SIMPLEX, 
                            0.5, 
                            (0, 0, 0), 
                            2)

                    # 디버깅 정보 출력
                    print(f"Detected: {class_name} ({score:.2f}) at [{x1},{y1},{x2},{y2}]")
                    
                except Exception as e:
                    print(f"Error drawing box: {e}")

            return draw_frame

        except KeyboardInterrupt:
            print("키보드 인터럽트 감지! detect 함수 종료.")
            return frame
        except Exception as e:
            print(f"Error in detect: {e}")
            import traceback
            traceback.print_exc()
            return frame 

    def __del__(self):
        if hasattr(self, 'rknn'):
            try:
                self.rknn.release()
                print("RKNN 모델 자원 해제 완료")
            except Exception as e:
                print(f"RKNN 모델 자원 해제 중 오류: {e}")

def find_working_camera():
    """Find the first working video device"""
    # Try mainpath devices first
    for i in range(12):
        device = f'/dev/video{i}'
        print(f"Testing {device}...")
        if test_camera_device(device):
            return device
    
    raise Exception("No working camera found")

# 안전한 종료를 위한 글로벌 플래그
program_running = True

def main():
    global program_running
    controller = None
    cap = None
    detector = None
    
    try:
        video_device = find_working_camera()
        print(f"Found working camera: {video_device}")

        # 먼저 키보드 컨트롤러 초기화
        serial_ports = ['/dev/ttyS3', '/dev/ttyS0', '/dev/ttyAMA0', '/dev/ttyUSB0']
        controller = None
        
        for port in serial_ports:
            try:
                print(f"시리얼 포트 {port} 연결 시도...")
                temp_controller = KeyboardController(serial_port=port)
                if temp_controller.ser and temp_controller.ser.is_open:
                    controller = temp_controller
                    print(f"시리얼 포트 {port} 연결 성공!")
                    break
                else:
                    print(f"시리얼 포트 {port} 사용 불가")
            except Exception as e:
                print(f"시리얼 포트 {port} 연결 실패: {e}")
        
        if controller is None:
            print("사용 가능한 시리얼 포트를 찾을 수 없습니다. 키보드 컨트롤 비활성화.")
            controller = KeyboardController(serial_port=None)
        
        controller.start()
        
        # 그 다음 RKNN 디텍터 초기화
        try:
            detector = RKNNDetector()
        except Exception as e:
            print(f"RKNN 디텍터 초기화 실패: {e}")
            raise
        
        # 마지막으로 카메라 초기화
        cap = cv2.VideoCapture(video_device)
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 640)
        
        if not cap.isOpened():
            print(f"카메라 {video_device} 열기 실패")
            raise Exception("카메라를 열 수 없습니다")
        
        cv2.namedWindow('Object Detection', cv2.WINDOW_NORMAL)
        cv2.resizeWindow('Object Detection', 640, 640)
        
        print("메인 루프 시작")
        program_running = True
        
        fps_values = []  # FPS 값을 저장할 리스트
        fps_alpha = 0.1  # EMA(지수이동평균) 가중치
        current_fps = 0   # 현재 FPS

        while program_running and controller.running:
            try:
                # 프레임 캡처
                ret, frame = cap.read()
                if not ret:
                    print("프레임 캡처 실패")
                    # 재시도 몇 번 하다가 안되면 종료
                    time.sleep(0.1)
                    continue

                # 처리 시작 시간 기록
                start_time = time.time()
                
                # 프레임 처리
                processed_frame = detector.detect(frame)
                if processed_frame is None:
                    print("Error: processed_frame is None")
                    continue

                # 처리 종료 시간 기록 및 FPS 계산
                end_time = time.time()
                frame_time = end_time - start_time
                
                # 지수 이동 평균으로 FPS 부드럽게 계산
                if frame_time > 0:
                    instant_fps = 1 / frame_time
                    if current_fps == 0:
                        current_fps = instant_fps
                    else:
                        current_fps = (fps_alpha * instant_fps) + ((1 - fps_alpha) * current_fps)
                
                # 프레임에 FPS 표시
                cv2.putText(processed_frame, f"FPS: {current_fps:.1f}", (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

                # 화면에 표시
                cv2.imshow('Object Detection', processed_frame)

                # 키 입력 처리 (OpenCV 창)
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q') or controller.interrupt_flag:
                    print("종료 명령 감지 - 프로그램 종료")
                    program_running = False
                    break
                elif key == ord('s'):
                    cv2.imwrite("captured_frame.jpg", processed_frame)
                    print("Frame saved to captured_frame.jpg")
                
                # 짧은 딜레이 추가로 CPU 부하 감소
                time.sleep(0.01)

            except KeyboardInterrupt:
                print("\n키보드 인터럽트 감지. 안전하게 종료합니다...")
                program_running = False
                break
            except Exception as e:
                print(f"프레임 처리 중 오류 발생: {e}")
                import traceback
                traceback.print_exc()
                # 오류 발생 시 잠시 대기 후 계속
                time.sleep(0.5)
                continue

    except KeyboardInterrupt:
        print("\n키보드 인터럽트로 프로그램을 종료합니다...")
        program_running = False
    except Exception as e:
        print(f"Error in main: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("프로그램 종료 중...")
        program_running = False
        
        # 리소스 정리
        if controller:
            try:
                controller.stop()
                print("키보드 컨트롤러 종료됨")
            except Exception as e:
                print(f"키보드 컨트롤러 종료 중 오류: {e}")
        
        if cap and cap.isOpened():
            try:
                cap.release()
                print("카메라 자원 해제됨")
            except Exception as e:
                print(f"카메라 자원 해제 중 오류: {e}")
        
        try:
            cv2.destroyAllWindows()
            print("OpenCV 창 종료됨")
        except Exception as e:
            print(f"OpenCV 창 종료 중 오류: {e}")
        
        if detector:
            try:
                del detector
                print("RKNN 디텍터 해제됨")
            except Exception as e:
                print(f"RKNN 디텍터 해제 중 오류: {e}")
        
        print("프로그램이 안전하게 종료되었습니다")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"프로그램 실행 중 예기치 않은 오류 발생: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("프로그램 종료")