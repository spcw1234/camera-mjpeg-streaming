#!/usr/bin/env python3
"""
🚀 MJPEG HTTP 스트리밍 방식
- GStreamer RTSP 대신 HTTP MJPEG 사용
- 훨씬 간단하고 빠른 스트리밍
- 웹브라우저에서 바로 볼 수 있음
"""

import cv2
import threading
import time
import numpy as np
from http.server import BaseHTTPRequestHandler, HTTPServer
from socketserver import ThreadingMixIn
import traceback
from rknnlite.api import RKNNLite as RKNN

def find_working_camera():
    """작동하는 카메라 찾기"""
    for i in range(12):
        device = f'/dev/video{i}'
        try:
            cap = cv2.VideoCapture(device)
            if cap.isOpened():
                ret, frame = cap.read()
                cap.release()
                if ret and frame is not None:
                    print(f"✓ 카메라 발견: {device}")
                    return device
        except:
            continue
    raise Exception("작동하는 카메라를 찾을 수 없습니다")

class MJPEGStreamHandler(BaseHTTPRequestHandler):
    """MJPEG 스트림 핸들러"""
    
    def do_GET(self):
        if self.path == '/':
            self.send_html_page()
        elif self.path == '/stream':
            self.send_mjpeg_stream()
        else:
            self.send_error(404)
    
    def send_html_page(self):
        """HTML 뷰어 페이지"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>🚀 실시간 카메라 스트림</title>
            <style>
                body { background: #000; color: #fff; text-align: center; font-family: Arial; }
                img { max-width: 90%; height: auto; border: 2px solid #0f0; }
                h1 { color: #0f0; }
            </style>
        </head>
        <body>
            <h1>🚀 실시간 카메라 스트림</h1>
            <img src="/stream" alt="Camera Stream">
            <p>실시간 MJPEG 스트리밍</p>
        </body>
        </html>
        """
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())
    
    def send_mjpeg_stream(self):
        """MJPEG 스트림 전송"""
        self.send_response(200)
        self.send_header('Content-Type', 'multipart/x-mixed-replace; boundary=frame')
        self.send_header('Cache-Control', 'no-cache')
        self.end_headers()
        
        try:
            while True:
                if hasattr(self.server, 'current_frame') and self.server.current_frame is not None:
                    # JPEG 인코딩
                    ret, jpeg = cv2.imencode('.jpg', self.server.current_frame, 
                                           [cv2.IMWRITE_JPEG_QUALITY, 85])
                    if ret:
                        # MJPEG 프레임 전송
                        self.wfile.write(b'--frame\r\n')
                        self.wfile.write(b'Content-Type: image/jpeg\r\n\r\n')
                        self.wfile.write(jpeg.tobytes())
                        self.wfile.write(b'\r\n')
                
                time.sleep(0.033)  # ~30 FPS
        except Exception as e:
            print(f"스트림 오류: {e}")

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """멀티스레드 HTTP 서버"""
    allow_reuse_address = True
    current_frame = None

class FastRKNNDetector:
    """빠른 RKNN 디텍터"""
    def __init__(self, model_path='/home/spcwtech/yolo5n_fish-rk3566.rknn'):
        print("🚀 빠른 RKNN 디텍터 초기화...")
        
        self.rknn = RKNN()
        ret = self.rknn.load_rknn(model_path)
        if ret != 0:
            raise Exception('RKNN 모델 로드 실패')
        
        ret = self.rknn.init_runtime()
        if ret != 0:
            raise Exception('RKNN 런타임 초기화 실패')
        
        self.input_size = 640
        
        # 성능 최적화 설정
        self.frame_skip = 2  # 매 2번째 프레임만 처리
        self.frame_counter = 0
        self.last_detections = []
        
        print("✓ 빠른 디텍터 초기화 완료")
    
    def letterbox(self, img, new_shape=(640, 640)):
        """빠른 리사이즈"""
        return cv2.resize(img, new_shape)
    
    def detect(self, frame):
        """빠른 감지"""
        try:
            # 프레임 스킵
            self.frame_counter += 1
            if self.frame_counter % self.frame_skip != 0:
                return self.draw_cached_detections(frame)
            
            # 전처리
            input_frame = self.letterbox(frame, (self.input_size, self.input_size))
            input_frame = np.expand_dims(input_frame, axis=0)
            
            # RKNN 추론
            outputs = self.rknn.inference(inputs=[input_frame])
            
            # 간단한 후처리
            detections = self.decode_predictions(outputs)
            self.last_detections = detections
            
            return self.draw_detections(frame, detections)
            
        except Exception as e:
            return frame
    
    def decode_predictions(self, outputs, conf_thres=0.5):
        """간단한 디코딩"""
        predictions = []
        try:
            for detection in outputs[0]:
                if len(detection) >= 6:
                    confidence = float(detection[4])
                    if confidence > conf_thres:
                        x, y, w, h = detection[:4]
                        class_id = int(detection[5])
                        predictions.append([x, y, w, h, confidence, class_id])
        except:
            pass
        return predictions
    
    def draw_cached_detections(self, frame):
        """캐시된 감지 결과 그리기"""
        return self.draw_detections(frame, self.last_detections)
    
    def draw_detections(self, frame, detections):
        """간단한 감지 결과 그리기"""
        for det in detections:
            try:
                x, y, w, h, conf, class_id = det
                x1 = int(x - w/2)
                y1 = int(y - h/2)
                x2 = int(x + w/2)
                y2 = int(y + h/2)
                
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f'{conf:.2f}', (x1, y1-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            except:
                continue
        
        return frame

def main():
    """메인 함수"""
    print("🚀 MJPEG HTTP 스트리밍 시작")
    
    cap = None
    detector = None
    server = None
    
    try:
        # 카메라 초기화
        video_device = find_working_camera()
        cap = cv2.VideoCapture(video_device)
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        cap.set(cv2.CAP_PROP_FPS, 30)
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        if not cap.isOpened():
            raise Exception("카메라를 열 수 없습니다")
        
        print("✓ 카메라 초기화 완료")
        
        # 디텍터 초기화
        detector = FastRKNNDetector()
        
        # HTTP 서버 시작
        server = ThreadedHTTPServer(('0.0.0.0', 8080), MJPEGStreamHandler)
        server_thread = threading.Thread(target=server.serve_forever, daemon=True)
        server_thread.start()
        
        print("✅ HTTP 서버 시작됨:")
        print(f"   🌐 로컬: http://localhost:8080")
        print(f"   🌐 외부: http://spcwtech.mooo.com:8080")
        print(f"   🎥 스트림: http://spcwtech.mooo.com:8080/stream")
        print("\n🚀 스트리밍 시작... (Ctrl+C로 종료)")
        
        frame_count = 0
        start_time = time.time()
        
        while True:
            ret, frame = cap.read()
            if not ret:
                time.sleep(0.01)
                continue
            
            # 감지 처리
            processed_frame = detector.detect(frame)
            
            # FPS 정보 추가
            frame_count += 1
            if frame_count % 30 == 0:
                elapsed = time.time() - start_time
                fps = frame_count / elapsed
                print(f"🚀 FPS: {fps:.1f}")
                start_time = time.time()
                frame_count = 0
            
            # 서버에 프레임 설정
            server.current_frame = processed_frame
            
            time.sleep(0.01)  # CPU 사용량 조절
    
    except KeyboardInterrupt:
        print("\n종료 신호 받음...")
    except Exception as e:
        print(f"오류 발생: {e}")
        traceback.print_exc()
    finally:
        print("리소스 정리 중...")
        
        if cap and cap.isOpened():
            cap.release()
            print("✓ 카메라 해제")
        
        if server:
            server.shutdown()
            print("✓ HTTP 서버 종료")
        
        if detector:
            try:
                detector.rknn.release()
            except:
                pass
            print("✓ 디텍터 정리")
        
        print("✅ MJPEG 스트리밍 종료 완료")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"메인 함수 오류: {e}")
        traceback.print_exc()
