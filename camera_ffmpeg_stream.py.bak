#!/usr/bin/env python3
"""
🚀 FFmpeg RTMP 저지연 스트리밍
- FFmpeg 파이프를 통한 실시간 스트리밍
- RTMP 서버로 저지연 전송
- VLC, OBS 등에서 바로 시청 가능
"""

import cv2
import subprocess
import threading
import time
import numpy as np
from rknnlite.api import RKNNLite as RKNN
import traceback
import signal
import sys

def find_working_camera():
    """작동하는 카메라 찾기"""
    for i in range(12):
        device = f'/dev/video{i}'
        try:
            cap = cv2.VideoCapture(device)
            if cap.isOpened():
                ret, frame = cap.read()
                cap.release()
                if ret and frame is not None:
                    print(f"✓ 카메라 발견: {device}")
                    return device
        except:
            continue
    raise Exception("작동하는 카메라를 찾을 수 없습니다")

class FFmpegRKNNDetector:
    """FFmpeg용 RKNN 디텍터"""
    def __init__(self, model_path='/home/spcwtech/yolo5n_fish-rk3566.rknn'):
        print("🚀 FFmpeg RKNN 디텍터 초기화...")
        
        self.rknn = RKNN()
        ret = self.rknn.load_rknn(model_path)
        if ret != 0:
            raise Exception('RKNN 모델 로드 실패')
        
        ret = self.rknn.init_runtime()
        if ret != 0:
            raise Exception('RKNN 런타임 초기화 실패')
        
        self.input_size = 640
        self.frame_skip = 2  # 매 2번째 프레임만 처리
        self.frame_counter = 0
        self.last_detections = []
        
        print("✓ FFmpeg 디텍터 초기화 완료")
    
    def letterbox(self, img, new_shape=(640, 640)):
        """빠른 리사이즈"""
        return cv2.resize(img, new_shape)
    
    def detect(self, frame):
        """빠른 감지"""
        try:
            self.frame_counter += 1
            if self.frame_counter % self.frame_skip != 0:
                return self.draw_cached_detections(frame)
            
            # 전처리
            input_frame = self.letterbox(frame, (self.input_size, self.input_size))
            input_frame = np.expand_dims(input_frame, axis=0)
            
            # RKNN 추론
            outputs = self.rknn.inference(inputs=[input_frame])
            
            # 후처리
            detections = self.decode_predictions(outputs)
            self.last_detections = detections
            
            return self.draw_detections(frame, detections)
            
        except Exception as e:
            return frame
    
    def decode_predictions(self, outputs, conf_thres=0.5):
        """간단한 디코딩"""
        predictions = []
        try:
            for detection in outputs[0]:
                if len(detection) >= 6:
                    confidence = float(detection[4])
                    if confidence > conf_thres:
                        x, y, w, h = detection[:4]
                        class_id = int(detection[5])
                        predictions.append([x, y, w, h, confidence, class_id])
        except:
            pass
        return predictions
    
    def draw_cached_detections(self, frame):
        return self.draw_detections(frame, self.last_detections)
    
    def draw_detections(self, frame, detections):
        for det in detections:
            try:
                x, y, w, h, conf, class_id = det
                x1 = int(x - w/2)
                y1 = int(y - h/2)
                x2 = int(x + w/2)
                y2 = int(y + h/2)
                
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f'{conf:.2f}', (x1, y1-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            except:
                continue
        return frame

class FFmpegStreamer:
    """FFmpeg 스트리머"""
    def __init__(self, output_url=None, width=640, height=480, fps=30):
        self.width = width
        self.height = height
        self.fps = fps
        self.ffmpeg_process = None
        self.running = False
        
        # 출력 URL 설정 (RTMP 또는 파일)
        if output_url is None:
            # 로컬 RTMP 서버가 없으면 파일로 저장
            self.output_url = f"/home/spcwtech/live_stream_{int(time.time())}.mp4"
            print(f"📁 파일로 저장: {self.output_url}")
        else:
            self.output_url = output_url
            print(f"📡 RTMP 스트리밍: {self.output_url}")
        
        self.start_ffmpeg()
    
    def start_ffmpeg(self):
        """FFmpeg 프로세스 시작"""
        try:
            # FFmpeg 명령어 구성
            cmd = [
                'ffmpeg',
                '-y',  # 덮어쓰기
                '-f', 'rawvideo',
                '-vcodec', 'rawvideo',
                '-pix_fmt', 'bgr24',
                '-s', f'{self.width}x{self.height}',
                '-r', str(self.fps),
                '-i', '-',  # stdin에서 입력
                '-c:v', 'libx264',
                '-preset', 'ultrafast',
                '-tune', 'zerolatency',
                '-crf', '23',
                '-maxrate', '1000k',
                '-bufsize', '2000k',
                '-g', '30',  # 키프레임 간격
                '-f', 'flv' if 'rtmp://' in self.output_url else 'mp4',
                self.output_url
            ]
            
            print(f"🚀 FFmpeg 명령어: {' '.join(cmd)}")
            
            # FFmpeg 프로세스 시작
            self.ffmpeg_process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            self.running = True
            print("✓ FFmpeg 프로세스 시작됨")
            
            # stderr 모니터링 스레드
            self.stderr_thread = threading.Thread(target=self.monitor_ffmpeg, daemon=True)
            self.stderr_thread.start()
            
        except Exception as e:
            print(f"FFmpeg 시작 실패: {e}")
            raise
    
    def monitor_ffmpeg(self):
        """FFmpeg stderr 모니터링"""
        try:
            while self.running and self.ffmpeg_process:
                line = self.ffmpeg_process.stderr.readline()
                if line:
                    line_str = line.decode('utf-8', errors='ignore').strip()
                    if 'frame=' in line_str:  # 프레임 정보만 출력
                        print(f"📹 {line_str}")
        except Exception as e:
            print(f"FFmpeg 모니터링 오류: {e}")
    
    def write_frame(self, frame):
        """프레임을 FFmpeg에 전송"""
        try:
            if self.ffmpeg_process and self.running:
                # 크기 조정
                if frame.shape[:2] != (self.height, self.width):
                    frame = cv2.resize(frame, (self.width, self.height))
                
                # FFmpeg stdin에 쓰기
                self.ffmpeg_process.stdin.write(frame.tobytes())
                return True
        except Exception as e:
            print(f"프레임 쓰기 오류: {e}")
            return False
        return False
    
    def stop(self):
        """FFmpeg 프로세스 중지"""
        self.running = False
        
        if self.ffmpeg_process:
            try:
                # stdin 닫기
                self.ffmpeg_process.stdin.close()
                
                # 프로세스 종료 대기 (최대 5초)
                self.ffmpeg_process.wait(timeout=5)
                print("✓ FFmpeg 프로세스 정상 종료")
            except subprocess.TimeoutExpired:
                # 강제 종료
                self.ffmpeg_process.terminate()
                try:
                    self.ffmpeg_process.wait(timeout=2)
                    print("✓ FFmpeg 프로세스 강제 종료")
                except subprocess.TimeoutExpired:
                    self.ffmpeg_process.kill()
                    print("✓ FFmpeg 프로세스 강제 킬")

def signal_handler(sig, frame):
    """시그널 핸들러"""
    print("\n종료 신호 받음...")
    sys.exit(0)

def main():
    """메인 함수"""
    print("🚀 FFmpeg 저지연 스트리밍 시작")
    
    # 시그널 핸들러 등록
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    cap = None
    detector = None
    streamer = None
    
    try:
        # 카메라 초기화
        video_device = find_working_camera()
        cap = cv2.VideoCapture(video_device)
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        cap.set(cv2.CAP_PROP_FPS, 30)
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        if not cap.isOpened():
            raise Exception("카메라를 열 수 없습니다")
        
        print("✓ 카메라 초기화 완료")
        
        # 디텍터 초기화
        detector = FFmpegRKNNDetector()
        
        # FFmpeg 스트리머 초기화
        # RTMP 서버가 있다면 URL 변경
        # rtmp_url = "rtmp://spcwtech.mooo.com/live/stream"
        streamer = FFmpegStreamer(output_url=None, width=640, height=480, fps=30)
        
        print("\n🚀 스트리밍 시작... (Ctrl+C로 종료)")
        print("📹 FFmpeg로 실시간 인코딩 중...")
        
        frame_count = 0
        start_time = time.time()
        
        while True:
            ret, frame = cap.read()
            if not ret:
                time.sleep(0.01)
                continue
            
            # 감지 처리
            processed_frame = detector.detect(frame)
            
            # FFmpeg에 프레임 전송
            if not streamer.write_frame(processed_frame):
                print("⚠️ FFmpeg 쓰기 실패")
                break
            
            # FPS 계산
            frame_count += 1
            if frame_count % 60 == 0:
                elapsed = time.time() - start_time
                fps = frame_count / elapsed
                print(f"🚀 처리 FPS: {fps:.1f}")
                start_time = time.time()
                frame_count = 0
            
            time.sleep(0.01)  # CPU 사용량 조절
    
    except KeyboardInterrupt:
        print("\n종료 신호 받음...")
    except Exception as e:
        print(f"오류 발생: {e}")
        traceback.print_exc()
    finally:
        print("리소스 정리 중...")
        
        if cap and cap.isOpened():
            cap.release()
            print("✓ 카메라 해제")
        
        if streamer:
            streamer.stop()
            print("✓ FFmpeg 스트리머 종료")
        
        if detector:
            try:
                detector.rknn.release()
            except:
                pass
            print("✓ 디텍터 정리")
        
        print("✅ FFmpeg 스트리밍 종료 완료")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"메인 함수 오류: {e}")
        traceback.print_exc()
