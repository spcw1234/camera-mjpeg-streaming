#!/usr/bin/env python3
"""
🚀 초고속 카메라 스트리밍 프로그램
- RKNN 추론 최적화
- DeepSORT 완전 제거
- 프레임 스킵 활성화
- 최소 지연 GStreamer 파이프라인
"""

import cv2
import gi
import threading
import time
import numpy as np
import traceback
from rknnlite.api import RKNNLite as RKNN

gi.require_version('Gst', '1.0')
gi.require_version('GstRtspServer', '1.0')
from gi.repository import Gst, GstRtspServer, GLib

def find_working_camera():
    """작동하는 카메라 찾기"""
    for i in range(12):
        device = f'/dev/video{i}'
        try:
            cap = cv2.VideoCapture(device)
            if cap.isOpened():
                ret, frame = cap.read()
                cap.release()
                if ret and frame is not None:
                    print(f"✓ 카메라 발견: {device}")
                    return device
        except:
            continue
    raise Exception("작동하는 카메라를 찾을 수 없습니다")

class FastGStreamerRTSPServer:
    """초고속 GStreamer RTSP 서버"""
    def __init__(self, port=7200, mount_point="/test"):
        self.port = port
        self.mount_point = mount_point
        self.server = None
        self.factory = None
        self.mainloop = None
        self.running = False
        self.appsrc = None
        self.frame_count = 0
        
        if not Gst.is_initialized():
            Gst.init(None)
        print(f"🚀 초고속 RTSP 서버 초기화 - Port: {port}")
    
    def create_pipeline(self):
        """초저지연 파이프라인"""
        return (
            "( appsrc name=source is-live=true block=false format=GST_FORMAT_TIME "
            "do-timestamp=true max-buffers=1 drop=true "
            "caps=video/x-raw,format=BGR,width=640,height=480,framerate=30/1 ! "
            "videoconvert ! video/x-raw,format=I420 ! "
            "x264enc speed-preset=ultrafast tune=zerolatency bitrate=500 threads=1 "
            "key-int-max=5 bframes=0 ! "
            "rtph264pay config-interval=1 mtu=1200 name=pay0 pt=96 )"
        )
    
    def start_server(self):
        """서버 시작"""
        try:
            self.server = GstRtspServer.RTSPServer()
            self.server.set_service(str(self.port))
            
            self.factory = GstRtspServer.RTSPMediaFactory()
            self.factory.set_launch(self.create_pipeline())
            self.factory.set_shared(True)
            self.factory.connect("media-configure", self.on_media_configure)
            
            mount_points = self.server.get_mount_points()
            mount_points.add_factory(self.mount_point, self.factory)
            self.server.attach(None)
            
            # GLib 루프 시작
            def glib_loop():
                self.mainloop = GLib.MainLoop()
                self.mainloop.run()
            
            self.glib_thread = threading.Thread(target=glib_loop, daemon=True)
            self.glib_thread.start()
            
            self.running = True
            print(f"✓ 초고속 RTSP 서버 시작 - rtsp://spcwtech.mooo.com:{self.port}{self.mount_point}")
            return True
            
        except Exception as e:
            print(f"서버 시작 실패: {e}")
            return False
    
    def on_media_configure(self, factory, media):
        """미디어 구성"""
        try:
            element = media.get_element()
            if element:
                self.appsrc = element.get_by_name("source")
                if self.appsrc:
                    # 초고속 설정
                    self.appsrc.set_property("is-live", True)
                    self.appsrc.set_property("block", False)
                    self.appsrc.set_property("max-buffers", 1)
                    self.appsrc.set_property("drop", True)
                    
                    caps = Gst.Caps.from_string("video/x-raw,format=BGR,width=640,height=480,framerate=30/1")
                    self.appsrc.set_property("caps", caps)
                    print("✓ 초고속 appsrc 구성 완료")
        except Exception as e:
            print(f"미디어 구성 오류: {e}")
    
    def push_frame(self, frame):
        """초고속 프레임 푸시"""
        try:
            if not self.running or self.appsrc is None:
                return False
            
            # 크기 조정 (필요시)
            if frame.shape[:2] != (480, 640):
                frame = cv2.resize(frame, (640, 480))
            
            # 데이터 변환
            data = frame.tobytes()
            buf = Gst.Buffer.new_allocate(None, len(data), None)
            buf.fill(0, data)
            
            # 타임스탬프 (간단)
            self.frame_count += 1
            buf.pts = self.frame_count * (Gst.SECOND // 30)  # 30fps
            buf.duration = Gst.SECOND // 30
            
            # 푸시
            retval = self.appsrc.emit('push-buffer', buf)
            return retval == Gst.FlowReturn.OK
                
        except:
            return False
    
    def stop_server(self):
        """서버 중지"""
        if self.running:
            self.running = False
            if self.appsrc:
                try:
                    self.appsrc.emit("end-of-stream")
                except:
                    pass
            if self.mainloop:
                try:
                    self.mainloop.quit()
                except:
                    pass
    
    def get_rtsp_url(self):
        return f"rtsp://spcwtech.mooo.com:{self.port}{self.mount_point}"

class UltraFastRKNNDetector:
    """초고속 RKNN 디텍터"""
    def __init__(self, model_path='/home/spcwtech/yolo5n_fish-rk3566.rknn'):
        print("🚀 초고속 RKNN 디텍터 초기화...")
        
        # RKNN 모델 로드
        self.rknn = RKNN()
        ret = self.rknn.load_rknn(model_path)
        if ret != 0:
            raise Exception('RKNN 모델 로드 실패')
        
        ret = self.rknn.init_runtime()
        if ret != 0:
            raise Exception('RKNN 런타임 초기화 실패')
        
        self.input_size = 640
        
        # 🚀 극한 최적화 설정
        self.frame_skip = 5  # 매 5번째 프레임만 처리
        self.frame_counter = 0
        self.last_detections = []  # 이전 감지 결과 재사용
        
        print("✓ 초고속 디텍터 초기화 완료")
    
    def letterbox(self, img, new_shape=(640, 640)):
        """빠른 리사이즈"""
        return cv2.resize(img, new_shape)
    
    def decode_predictions(self, output, conf_thres=0.5):
        """빠른 디코딩"""
        predictions = []
        try:
            # 간단한 디코딩 (속도 우선)
            for detection in output[0]:
                if len(detection) >= 6:
                    confidence = float(detection[4])
                    if confidence > conf_thres:
                        x, y, w, h = detection[:4]
                        class_id = int(detection[5])
                        predictions.append([x, y, w, h, confidence, class_id])
        except:
            pass
        return predictions
    
    def detect(self, frame):
        """초고속 감지"""
        try:
            # 🚀 프레임 스킵으로 성능 향상
            self.frame_counter += 1
            if self.frame_counter % self.frame_skip != 0:
                # 이전 결과 재사용
                return self.draw_cached_detections(frame)
            
            # 전처리 (최소화)
            input_frame = self.letterbox(frame, (self.input_size, self.input_size))
            input_frame = np.expand_dims(input_frame, axis=0)
            
            # RKNN 추론
            outputs = self.rknn.inference(inputs=[input_frame])
            
            # 후처리 (최소화)
            predictions = self.decode_predictions(outputs, conf_thres=0.5)
            
            # 결과 캐시
            self.last_detections = predictions
            
            # 그리기
            return self.draw_detections(frame, predictions)
            
        except Exception as e:
            print(f"감지 오류: {e}")
            return frame
    
    def draw_cached_detections(self, frame):
        """캐시된 감지 결과 그리기"""
        return self.draw_detections(frame, self.last_detections)
    
    def draw_detections(self, frame, detections):
        """간단한 감지 결과 그리기"""
        for det in detections:
            try:
                x, y, w, h, conf, class_id = det
                x1 = int(x - w/2)
                y1 = int(y - h/2)
                x2 = int(x + w/2)
                y2 = int(y + h/2)
                
                # 간단한 박스만 그리기
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f'{conf:.2f}', (x1, y1-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            except:
                continue
        
        return frame

def main():
    """초고속 메인 함수"""
    print("🚀 초고속 카메라 스트리밍 시작")
    
    cap = None
    detector = None
    gst_server = None
    
    try:
        # GStreamer 초기화
        if not Gst.is_initialized():
            Gst.init(None)
        
        # 카메라 찾기
        video_device = find_working_camera()
        
        # 카메라 초기화 (고속 설정)
        cap = cv2.VideoCapture(video_device)
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        cap.set(cv2.CAP_PROP_FPS, 30)
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # 버퍼 최소화
        
        if not cap.isOpened():
            raise Exception("카메라를 열 수 없습니다")
        
        print("✓ 고속 카메라 초기화 완료")
        
        # 초고속 디텍터 초기화
        detector = UltraFastRKNNDetector()
        
        # 초고속 RTSP 서버 초기화
        gst_server = FastGStreamerRTSPServer(port=7200, mount_point="/test")
        if not gst_server.start_server():
            raise Exception("RTSP 서버 시작 실패")
        
        print(f"\n🎥 초고속 스트리밍 URL: {gst_server.get_rtsp_url()}")
        print("🚀 초고속 처리 시작... (Ctrl+C로 종료)")
        
        frame_count = 0
        start_time = time.time()
        fps_counter = 0
        
        while True:
            # 프레임 캡처
            ret, frame = cap.read()
            if not ret:
                time.sleep(0.001)
                continue
            
            # 초고속 처리
            processed_frame = detector.detect(frame)
            
            # 초고속 스트리밍
            gst_server.push_frame(processed_frame)
            
            # FPS 카운터
            fps_counter += 1
            if fps_counter % 30 == 0:
                elapsed = time.time() - start_time
                fps = fps_counter / elapsed
                print(f"🚀 초고속 FPS: {fps:.1f}")
                
                # 리셋
                start_time = time.time()
                fps_counter = 0
            
            # 최소 대기
            time.sleep(0.001)
    
    except KeyboardInterrupt:
        print("\n종료 신호 받음...")
    except Exception as e:
        print(f"오류 발생: {e}")
        traceback.print_exc()
    finally:
        print("리소스 정리 중...")
        
        if cap and cap.isOpened():
            cap.release()
            print("✓ 카메라 해제")
        
        if gst_server:
            gst_server.stop_server()
            print("✓ RTSP 서버 중지")
        
        if detector:
            try:
                detector.rknn.release()
            except:
                pass
            print("✓ 디텍터 정리")
        
        print("✅ 초고속 프로그램 종료 완료")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"메인 함수 오류: {e}")
        traceback.print_exc()
